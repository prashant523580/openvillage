generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  PLANNED
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  phoneNumber   String?
  emailVerified DateTime?
  password      String?       @default("")
  image         String?
  role          Role           @default(USER)
  accounts      Account[]
  sessions      Session[]
  surveys       SurveyResponse[]
  projects      Project[]
  governances   Governance[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SurveyResponse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  needs      String
  challenges String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Project {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  status       ProjectStatus @default(PLANNED)
  startDate    DateTime
  endDate      DateTime?
  impact       String
  opportunities String
  createdBy    String        @db.ObjectId
  author       User          @relation(fields: [createdBy], references: [id])
  createdAt    DateTime      @default(now())
}

model Governance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  type      String
  date      DateTime @default(now())
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
}