generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  PLANNED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?          @unique
  phoneNumber   String?
  emailVerified DateTime?
  password      String?          @default("")
  image         String?
  role          Role             @default(USER)
  accounts      Account[]
  sessions      Session[]
  surveys       SurveyResponse[]
  projects      Project[]
  governances   Governance[]
  donors        Donor[]          
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SurveyResponse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  needs      String
  challenges String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Project {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  status        ProjectStatus @default(PLANNED)
  startDate     DateTime
  endDate       DateTime?
  impact        String
  opportunities String
  donors        Donor[]       
  createdBy     String        @db.ObjectId
  author        User          @relation(fields: [createdBy], references: [id])
  createdAt     DateTime      @default(now())
}

model Governance {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  type     String
  date     DateTime @default(now())
  authorId String   @db.ObjectId
  author   User     @relation(fields: [authorId], references: [id])
}

model Donor {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String
  amount           Float
  projectId        String           @db.ObjectId
  project          Project          @relation(fields: [projectId], references: [id])
  userId           String?          @db.ObjectId
  user             User?            @relation(fields: [userId], references: [id])
  paymentId        String           @unique
  esewaPid         String?          // eSewa product ID
  transactionId    String?          // eSewa transaction ID
  transactionStatus TransactionStatus @default(PENDING)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model ContactSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}